// Top-level build file where you can add configuration options common to all sub-projects/modules.


apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'maven'

group = 'ir.saverin.kafshdoozak'
version = '0.0.1-SNAPSHOT'
def artifact_id = 'fraimeroid'


buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}



allprojects {
    repositories {
        jcenter()
    }
}


android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "0.1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:21.0.3'
}


repositories {
    maven {
        // change to point to your repo, e.g. http://my.org/repo
        url "https://oss.sonatype.org/content/repositories/snapshots"
        name "ossrh"
    }
}
/*publishing {
    publications {
        aar(MavenPublication) {
            groupId = project.getGroup()
            version = project.getVersion()
            artifactId = project.getName()

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact("$buildDir/libs/${project.getName()}-${project.getVersion()}-javadoc.jar")
            artifact("$buildDir/libs/${project.getName()}-${project.getVersion()}-sources.jar")


        }
    }

    *//* repositories {
         maven {
             // change to point to your repo, e.g. http://my.org/repo
             url "https://oss.sonatype.org/content/repositories/snapshots"
             name "ossrh"
         }
     }*//*
}*/

//if you want to publish to remote repo, set this flag to true and set username and password
def publishToRemote = false
uploadArchives {
    repositories {
        if (publishToRemote) {
            mavenDeployer {
                repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: "", password: "")
                }
                pom.version = project.getVersion()
                pom.artifactId = project.getName()
                pom.groupId = project.getGroup()
            }
        }
        mavenInstaller {
            pom.groupId = rootProject.group
            pom.artifactId = project.name
            pom.version = rootProject.version
        }
    }
}

/*
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}*/

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    baseName = project.getName()
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    baseName = project.getName()
    from android.sourceSets.main.java.srcDirs
}

artifacts {
//    archives packageReleaseJar
    archives androidSourcesJar
    archives androidJavadocsJar
}



